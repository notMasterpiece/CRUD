{"version":3,"sources":["components/SinglePostEdit.js","components/Comment.js","components/SinglePostShow.js","components/TopForm.js","components/ListWrap.js","components/PostWrap.js","App.js","serviceWorker.js","index.js"],"names":["SinglePostEdit","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","value","target","onCreate","id","match","params","preventDefault","newPost","title","state","axios","post","concat","then","history","push","catch","err","console","log","_this2","get","data","react_default","a","createElement","className","onSubmit","type","disabled","trim","length","Component","Comment","comment","commentValue","deleteComment","_this$props$comment","_id","onClick","getPosts","addComment","newComments","res","comments","postId","delete","editComment","_this$state","map","c","components_Comment","key","TopForm","_ref","placeholder","ListWrap","list","onDelete","onEdit","item","Link","to","PostWrap","newList","filter","l","showEdit","resetState","posts","components_TopForm","components_ListWrap","React","App","BrowserRouter","Switch","Route","exact","path","component","SinglePostShow","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02243bc1.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport axios from 'axios';\n\nclass SinglePostEdit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: ''\n        }\n\n    }\n\n    onChange = e => {\n        this.setState({value: e.target.value})\n    };\n\n    onCreate = e => {\n        const {id} = this.props.match.params;\n        e.preventDefault();\n        const newPost = {\n            title: this.state.value\n        };\n\n        axios.post(`/api/post/${id}`, newPost)\n            .then(() => {\n                this.props.history.push('/');\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    };\n\n\n    componentDidMount() {\n        const {id} = this.props.match.params;\n        axios.get(`/api/post/${id}`)\n            .then(post => {\n                this.setState({\n                    value: post.data.title\n                })\n            })\n    }\n\n\n    render() {\n        const {value} = this.state;\n        return (\n            <div>\n                <br/>\n                <div className=\"container\">\n                    <form className='top-form' onSubmit={this.onCreate}>\n                        <input className='form-input' type=\"text\" value={value} onChange={this.onChange} />\n                        <button type='submit' disabled={value.trim().length <= 0}>Змінити</button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default SinglePostEdit;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Comment extends Component {\n\n    componentDidMount() {\n        const {title} = this.props.comment;\n        this.setState({\n            commentValue: title\n        })\n\n    }\n\n\n    render() {\n        const {deleteComment} = this.props;\n        const {_id, title} = this.props.comment;\n\n        return (\n            <li className='comment'>\n                <span>{title}</span>\n                <button onClick={() => deleteComment(_id)}>Видалити</button>\n            </li>\n        );\n    }\n}\n\nComment.propTypes = {\n    deleteComment: PropTypes.func.isRequired\n};\n\nexport default Comment;\n","import React, {Component} from 'react';\n\nimport axios from 'axios';\nimport Comment from './Comment';\n\nclass SinglePostEdit extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            post: '',\n            comment: '',\n            comments: [],\n        }\n\n    }\n\n    componentDidMount() {\n        this.getPosts();\n    }\n\n\n    getPosts = () => {\n        const {id} = this.props.match.params;\n        axios.get(`/api/post/${id}`)\n            .then(post => {\n                this.setState({\n                    post: post.data\n                })\n            })\n    };\n\n    onChange = e => {\n        this.setState({comment: e.target.value});\n    };\n\n    addComment = e => {\n        e.preventDefault();\n        const {id} = this.props.match.params;\n\n        const newComments = {\n            title: this.state.comment\n        };\n\n        axios.post(`/api/post/comment/${id}`, newComments)\n            .then(res => {\n                this.setState({\n                    comments: res.data.comments,\n                    comment: ''\n                });\n                this.getPosts();\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    };\n\n\n    deleteComment = id => {\n        const postId = this.props.match.params.id;\n        axios.delete(`/api/post/uncomment/${postId}/${id}`)\n            .then(() => {\n                this.getPosts();\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    };\n\n\n    editComment = id => {\n            // const postId = this.props.match.params.id;\n            // axios.delete(`/api/post/uncomment/${postId}/${id}`)\n            //     .then(() => {\n            //         this.getPosts();\n            //     })\n            //     .catch(err => {\n            //         console.log(err);\n            //     })\n    };\n\n\n\n    render() {\n        const {post, comment} = this.state;\n        return (\n            <div>\n                <br/>\n                <div className=\"list-item\">\n                    {post.title}\n                </div>\n\n                <div className=\"comments-block\">\n                    <form className=\"comments-form\" onSubmit={this.addComment}>\n                        <input type=\"text\" onChange={this.onChange} value={comment} />\n                        <button type='submit'>Додати коммент</button>\n                    </form>\n                    <ol>\n                        {\n                            post.comments && post.comments.map(c => <Comment key={c._id} comment={c} editComment={this.editComment} deleteComment={this.deleteComment} />)\n                        }\n                    </ol>\n\n\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default SinglePostEdit;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TopForm = ({value, onChange, onCreate}) => {\n    return (\n        <form className='top-form' onSubmit={onCreate} >\n            <input className='form-input'\n                   type=\"text\"\n                   value={value}\n                   onChange={onChange}\n                   placeholder='...'\n            />\n            <button type='submit' disabled={value.trim().length <= 0}>Створити новий</button>\n        </form>\n    );\n};\n\nTopForm.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default TopForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nconst ListWrap = ({list, onDelete, onEdit}) => {\n    if (list && list.length <= 0 )  return <p> постів немає</p>;\n\n    return (\n        <ul>\n            {\n                list && list.map( item => {\n                   return (\n                       <li key={item._id} className='list-item'>\n                           <Link to={`post/show/${item._id}`}>{item.title}</Link>\n                           <Link to={`/post/edit/${item._id}`} className='btn-edit' type='button' onClick={onEdit}>Змінити</Link>\n                           <button className='btn-delete' type='button' onClick={() => onDelete(item._id)}>Видалити</button>\n                       </li>\n                   )\n                })\n            }\n        </ul>\n    );\n};\n\nListWrap.propTypes = {\n    list: PropTypes.array,\n    onDelete: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n};\n\nexport default ListWrap;\n","import React from 'react';\nimport TopForm from './TopForm';\nimport ListWrap from './ListWrap';\nimport axios from \"axios/index\";\n\nclass PostWrap extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: '',\n        }\n    }\n\n    onDelete = id => {\n        const {list} = this.state;\n\n        axios.delete(`/api/post/${id}`)\n            .then(() => {\n                const newList = list.filter(l => l._id !== id);\n                this.setState({\n                    list: newList\n                })\n            })\n    };\n\n\n    onEdit = () => {\n        this.setState({ showEdit: !this.state.showEdit })\n    };\n\n\n    onChange = e => {\n        this.setState({value: e.target.value})\n    };\n\n    onCreate = e => {\n        e.preventDefault();\n        if( !this.state.value.trim().length ) return false;\n\n        const newPost = {\n            title: this.state.value\n        };\n\n        axios.post('/api/post', newPost)\n            .then(() => {\n                this.getPosts();\n                this.resetState();\n            });\n    };\n\n    getPosts = () => {\n        axios.get('/api/post')\n            .then(posts => {\n                this.setState({\n                    list: posts.data\n                })\n            })\n    };\n\n    resetState = () => {\n        this.setState({ value: '' })\n    };\n\n\n    componentDidMount() {\n        this.getPosts();\n    }\n\n    render () {\n        const {value, list} = this.state;\n\n        return (\n            <div>\n                <TopForm\n                    value={value}\n                    onChange={this.onChange}\n                    onCreate={this.onCreate}\n                />\n                <ListWrap\n                    list={list}\n                    onDelete={this.onDelete}\n                    onEdit={this.onEdit}\n                />\n            </div>\n        );\n    }\n};\n\n\nexport default PostWrap;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport SinglePostEdit from './components/SinglePostEdit';\nimport SinglePostShow from './components/SinglePostShow';\n\nimport PostWrap from \"./components/PostWrap\";\n\nclass App extends Component {\n    render() {\n\n    return (\n      <div className=\"container\">\n          <Router>\n              <Switch>\n                  <Route exact path={'/'} component={ PostWrap } />\n                  <Route exact path={'/post/edit/:id'} component={ SinglePostEdit } />\n                  <Route exact path={'/post/show/:id'} component={ SinglePostShow } />\n              </Switch>\n          </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}